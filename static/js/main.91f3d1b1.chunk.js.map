{"version":3,"sources":["MyCard.js","App.js","serviceWorker.js","index.js"],"names":["MyCard","details","refresh","useState","tabInfo","setTabInfo","fullName","title","name","first","last","nameTag","CardTitle","check","useEffect","Card","className","style","CardBody","height","width","src","picture","large","alt","Provider","value","size","ButtonGroup","Button","outline","color","onMouseOver","phone","email","age","dob","country","location","onClick","App","setDetails","fetchDetails","a","Axios","get","data","console","log","results","Container","fluid","Row","Col","md","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91f3d1b1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardTitle, CardBody, Button, ButtonGroup } from \"reactstrap\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { RiAccountCircleLine } from \"react-icons/ri\";\r\nimport { FiPhone } from \"react-icons/fi\";\r\nimport { MdPlace, MdDateRange } from \"react-icons/md\";\r\nimport { AiOutlineMail } from \"react-icons/ai\";\r\n\r\nconst MyCard = ({ details, refresh }) => {\r\n  //useing state to store tab data\r\n  const [tabInfo, setTabInfo] = useState();\r\n\r\n  //full name tab\r\n  const fullName = () => {\r\n    const title = details.name?.title;\r\n    const first = details.name?.first;\r\n    const last = details.name?.last;\r\n    const nameTag = (\r\n      <CardTitle>\r\n        <h5>My Name is</h5>\r\n        <h2> {title + \" \" + first + \" \" + last} </h2>\r\n      </CardTitle>\r\n    );\r\n    setTabInfo(nameTag);\r\n  };\r\n\r\n  //using effect to refresh tab data with refresh user\r\n  const check = details.name?.first;\r\n  useEffect(() => {\r\n    setTabInfo(fullName);\r\n  }, [check]);\r\n\r\n  //phone tab\r\n  const phone = () => {\r\n    const phone = (\r\n      <CardTitle>\r\n        <h5>Call Me At</h5>\r\n        <h2> {details.phone} </h2>\r\n      </CardTitle>\r\n    );\r\n    setTabInfo(phone);\r\n  };\r\n\r\n  //email tab\r\n  const email = () => {\r\n    const email = (\r\n      <CardTitle>\r\n        <h5>My Email is</h5>\r\n        <h4> {details.email} </h4>\r\n      </CardTitle>\r\n    );\r\n    setTabInfo(email);\r\n  };\r\n\r\n  //age tab\r\n  const age = () => {\r\n    const age = (\r\n      <CardTitle>\r\n        <h5>My Age is</h5>\r\n        <h2> {details.dob?.age} </h2>\r\n      </CardTitle>\r\n    );\r\n    setTabInfo(age);\r\n  };\r\n\r\n  //country tab\r\n  const country = () => {\r\n    const country = (\r\n      <CardTitle>\r\n        <h5>I live in</h5>\r\n        <h2> {details.location?.country} </h2>\r\n      </CardTitle>\r\n    );\r\n    setTabInfo(country);\r\n  };\r\n\r\n  //returning card\r\n  return (\r\n    <Card className=\"cardShade\" style={{}}>\r\n      <CardBody>\r\n        <img\r\n          height=\"150\"\r\n          width=\"150\"\r\n          className=\"rounded-circle img-thumbnail border-dark\"\r\n          src={details.picture?.large}\r\n          alt={details.name?.first}\r\n        />\r\n        <div className=\"Cheader\">{tabInfo}</div>\r\n        <IconContext.Provider value={{ size: \"25px\" }}>\r\n          <ButtonGroup>\r\n            <Button outline color=\"dark\" onMouseOver={fullName}>\r\n              <RiAccountCircleLine />\r\n            </Button>\r\n            <Button outline color=\"dark\" onMouseOver={phone}>\r\n              <FiPhone />\r\n            </Button>\r\n            <Button outline color=\"dark\" onMouseOver={email}>\r\n              <AiOutlineMail />\r\n            </Button>\r\n            <Button outline color=\"dark\" onMouseOver={age}>\r\n              <MdDateRange />\r\n            </Button>\r\n            <Button outline color=\"dark\" onMouseOver={country}>\r\n              <MdPlace />\r\n            </Button>\r\n          </ButtonGroup>\r\n          <Button color=\"dark\" className=\"block\" onClick={refresh}>\r\n            Refresh\r\n          </Button>\r\n        </IconContext.Provider>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default MyCard;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport MyCard from \"./MyCard\";\nimport Axios from \"axios\";\n\nfunction App() {\n  const [details, setDetails] = useState({});\n\n  const fetchDetails = async () => {\n    const { data } = await Axios.get(\"https://randomuser.me/api/\");\n    console.log(\"RESPONSE: \", data);\n\n    const details = data.results[0];\n\n    setDetails(details);\n  };\n\n  useEffect(() => {\n    fetchDetails();\n  }, []);\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col className=\"m-auto\" md={6}>\n          <MyCard details={details} refresh={fetchDetails} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}